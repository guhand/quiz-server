generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Role {
  id        Int       @id @default(autoincrement())
  role      String
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  users     User[]
}

model User {
  id              Int               @id @default(autoincrement())
  firstName       String
  lastName        String
  email           String            @unique
  mobile          String            @unique
  token           String?
  roleId          Int
  role            Role              @relation(fields: [roleId], references: [id])
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  userInfo        UserInfo[]
  userTestDetails UserTestDetails[]
}

model UserInfo {
  id                Int       @id @default(autoincrement())
  userId            Int
  positionId        Int
  position          Position  @relation(fields: [positionId], references: [id])
  user              User      @relation(fields: [userId], references: [id])
  dob               String
  college           String
  degree            String
  specialization    String
  isFresher         Boolean
  yearsOfExperience Int?
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime?
}

model Position {
  id        Int        @id @default(autoincrement())
  position  String
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
  userInfo  UserInfo[]
}

model Test {
  id              Int               @id @default(autoincrement())
  subject         String
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  questions       Question[]
  userTestDetails UserTestDetails[]
}

model Question {
  id        Int       @id @default(autoincrement())
  question  String
  subjectId Int
  test      Test      @relation(fields: [subjectId], references: [id])
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  options   Option[]
}

model Option {
  id         Int       @id @default(autoincrement())
  option     String
  isCorrect  Boolean
  questionId Int
  question   Question  @relation(fields: [questionId], references: [id])
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
}

model UserTestDetails {
  id            Int       @id @default(autoincrement())
  userId        Int
  user          User      @relation(fields: [userId], references: [id])
  subjectId     Int
  test          Test      @relation(fields: [subjectId], references: [id])
  score         String    @default("0")
  percentage    Int       @default(0)
  isStart       Boolean?
  isFinish      Boolean   @default(false)
  reassignCount Int       @default(0)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
}
